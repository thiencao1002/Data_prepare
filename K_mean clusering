from __future__ import print_function 
import numpy as np
import matplotlib.pyplot as plt
from scipy.spatial.distance import cdist
np.random.seed(11)
means = [[2, 2], [8, 3], [3, 6]]
cov = [[1, 0], [0, 1]]
N = 500
X0 = np.random.multivariate_normal(means[0], cov, N)
X1 = np.random.multivariate_normal(means[1], cov, N)
X2 = np.random.multivariate_normal(means[2], cov, N)

X = np.concatenate((X0, X1, X2), axis = 0)
K = 3

original_label = np.asarray([0]*N + [1]*N + [2]*N).T
def kmeans_display(X, label):
    K = np.amax(label) + 1
    X0 = X[label == 0, :]
    X1 = X[label == 1, :]
    X2 = X[label == 2, :]
    
    plt.plot(X0[:, 0], X0[:, 1], 'b^', markersize = 4, alpha = .8)
    plt.plot(X1[:, 0], X1[:, 1], 'go', markersize = 4, alpha = .8)
    plt.plot(X2[:, 0], X2[:, 1], 'rs', markersize = 4, alpha = .8)

    plt.axis('equal')
    plt.plot()
    plt.show()
    
kmeans_display(X, original_label)
plt.scatter(points[:, 0], points[:, 1])
def identify_centroids(X, k):
    centroids = X.copy()
    np.random.shuffle(centroids)
    return centroids[:k]
plt.scatter(X[:, 0], X[:, 1])
centroids = identify_centroids(X, 3)
plt.scatter(centroids[:, 0], centroids[:, 1], c='r', s=100)
def closest_centroid(X, centroids):
    distances = np.sqrt(((X - centroids[:, np.newaxis])**2).sum(axis=2))
    return np.argmin(distances, axis=0)
def move_centroids(X, closest, centroids):
    return np.array([X[closest==k].mean(axis=0) for k in range(centroids.shape[0])])
def k_mean(X, k):
  centroids = identify_centroids(X, k)
  running = True
  while running:
    closest = closest_centroid(X, centroids)
    old_centroids = centroids
    centroids = move_centroids(X, closest, centroids)
    # print(centroids)
    # print(old_centroids)
    if (old_centroids == centroids).all():
      running = False
  return closest,centroids
def k_display(X,closest,centroids):
    plt.scatter(X[:, 0], X[:, 1], c=closest)
    plt.scatter(centroids[:, 0], centroids[:, 1], c='r', s=100)
    plt.show()
closest,centroids = k_mean(X, 3)
k_display(X,closest,centroids)
closest,centroids = k_mean(X, 4)
k_display(X,closest,centroids)
closest,centroids = k_mean(X, 5)
k_display(X,closest,centroids)
